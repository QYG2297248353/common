package com.ms.common.regular.regex;

public class Regexp {
    /**
     * 正则表达式：验证邮箱
     */
    public static final String REGEX_EMAIL = "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$";
    /**
     * 正则表达式：验证手机号
     */
    public static final String REGEX_PHONE = "^1(3\\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\\d|9[0-35-9])\\d{8}$";
    /**
     * 正则表达式：验证统一信用代码
     */
    public static final String REGEX_UCC = "^([1-9|A|N|Y])([1-9])([0-9]{6})[A-Z0-9]{10}$";
    /**
     * 正则表达式：验证IPV4地址
     */
    public static final String REGEX_IP_ADDR = "((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)";
    public static final String REGEX_LAN_IP_ADDR = "(?:(?:10(?:(?:\\.1[0-9][0-9])|(?:\\.2[0-4][0-9])|(?:\\.25[0-5])|(?:\\.[1-9][0-9])|(?:\\.[0-9])))|(?:172(?:\\.(?:1[6-9])|(?:2[0-9])|(?:3[0-1])))|(?:192\\.168))(?:(?:\\.1[0-9][0-9])|(?:\\.2[0-4][0-9])|(?:\\.25[0-5])|(?:\\.[1-9][0-9])|(?:\\.[0-9])){2}";
    /**
     * 正则表达式：匹配非中文字符
     */
    public static final String REGEX_OUT_CHINESE = "[^\\u4E00-\\u9FA5]";
    /**
     * 正则表达式：匹配中文字符
     */
    public static final String REGEX_CHINESE = "[\\u4E00-\\u9FA5]";
    /**
     * 正则表达式：匹配企业名法人名
     */
    public static final String REGEX_CORP_ENTERPRISE = "[()\\(\\)]|(集团)|(企业)|(有限)|(股份)|(公司)|(合作)|(工作室)|(暂无)";
    public static final String REGEX_ID_CARD = "(^\\d{18}$)|(^\\d{15}$)";
    public static final String REGEX_URL = "http(s)?://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?";
    public static final String REGEX_ZIP_CODE = "^[1-9][0-9]{5}$";
    public static final String REGEX_QQ = "[1-9][0-9]{4,}";
    public static final String REGEX_DATE = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$";
    public static final String REGEX_TIME = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    public static final String REGEX_DATE_TIME = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) ([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$";
    public static final String REGEX_DATE_TIME_SECOND = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) ([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d\\.\\d{1,3}$";
    public static final String REGEX_DATE_TIME_SECOND_ZONE = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) ([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d\\.\\d{1,3}\\+\\d{4}$";
    public static final String REGEX_DATE_TIME_SECOND_ZONE_WITHOUT_SECOND = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) ([01]\\d|2[0-3]):[0-5]\\d$";
    public static final String REGEX_DATE_TIME_SECOND_ZONE_WITHOUT_SECOND_WITHOUT_ZONE = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) ([01]\\d|2[0-3]):[0-5]\\d$";
    /**
     * 正则表达式：匹配空格、回车、换行符、制表符
     */
    public static String REGEX_STRING = "\\s*|\t|\r|\n";
}
